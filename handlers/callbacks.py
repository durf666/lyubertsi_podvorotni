import logging
import random
import sqlite3

from aiogram import Router
from aiogram import types
from aiogram.types import CallbackQuery
from aiogram.types import FSInputFile
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database.crud import get_location_by_number, get_connected_locations, get_random_enemy
from handlers.location import go_to_location
from keyboards.location_keyboard import get_location_keyboard

callback_router = Router()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def return_to_location(message: types.Message, location_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é."""
    try:
        with sqlite3.connect('db/game.db') as conn:
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
            cursor.execute('SELECT * FROM locations WHERE id=?', (location_id,))
            location = get_location_by_number(cursor, location_id)
            print(location)
            if location:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                photo = FSInputFile(location.image)  # image
                keyboard = get_location_keyboard(location)  # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                await message.answer_photo(
                    photo=photo,
                    caption=f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–æ–∫–∞—Ü–∏–∏: {location.name}\n\n{location.description}",
                    reply_markup=keyboard  # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                )
            else:
                await message.answer("–õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except sqlite3.Error as e:
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}')

def calculate_damage(attacker, defender, is_defending=False):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–Ω, –Ω–∞–Ω–µ—Å—ë–Ω–Ω—ã–π –∞—Ç–∞–∫—É—é—â–∏–º."""
    damage = random.randint(attacker['min_damage'], attacker['max_damage'])
    if is_defending:
        damage = max(1, damage // 2)  # –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–Ω, –µ—Å–ª–∏ –∑–∞—â–∏—â–∞–µ–º—Å—è
    defender['hp'] -= damage
    return damage


@callback_router.callback_query(lambda c: c.data == 'action_move')
async def handle_action_move(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–ü–µ—Ä–µ–π—Ç–∏ –≤ –¥—Ä—É–≥—É—é –ª–æ–∫–∞—Ü–∏—é'."""
    user_id = callback_query.from_user.id

    try:
        with sqlite3.connect('db/game.db') as conn:
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é –∏–≥—Ä–æ–∫–∞
            cursor.execute('SELECT current_location FROM characters WHERE user_id=?', (user_id,))
            current_location = cursor.fetchone()

            if current_location:
                current_location_id = current_location[0]

                # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
                connected_locations = get_connected_locations(cursor, current_location_id)
                if connected_locations:
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–π
                    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text=loc[1], callback_data=f"move_to_{loc[2]}")]
                        # loc[1] ‚Äî –∏–º—è –ª–æ–∫–∞—Ü–∏–∏, loc[2] ‚Äî –Ω–æ–º–µ—Ä
                        for loc in connected_locations
                    ])
                    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞:", reply_markup=keyboard)
                else:
                    await callback_query.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞.")
            else:
                await callback_query.message.answer("–¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except sqlite3.Error as e:
        await callback_query.message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}')

    @callback_router.callback_query(lambda c: c.data.startswith('move_to_'))
    async def handle_move_to_location(callback_query: CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞."""
        user_id = callback_query.from_user.id
        location_number = int(callback_query.data.split('_')[2])  # move_to_1 ‚Üí 1

        try:
            with sqlite3.connect('db/game.db') as conn:
                cursor = conn.cursor()

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
                location = get_location_by_number(cursor, location_number)
                if location:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é –∏–≥—Ä–æ–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                    cursor.execute('UPDATE characters SET current_location=? WHERE user_id=?',
                                   (location.number, user_id))
                    conn.commit()

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏
                    keyboard = get_location_keyboard(location)
                    photo = FSInputFile(location.image)
                    await callback_query.message.answer_photo(
                        photo=photo,
                        caption=f"–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –ª–æ–∫–∞—Ü–∏—é: {location.name}\n\n{location.description}",
                        reply_markup=keyboard
                    )
                else:
                    await callback_query.message.answer("–õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except sqlite3.Error as e:
            await callback_query.message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}')
        except FileNotFoundError:
            await callback_query.message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@callback_router.callback_query(lambda c: c.data == 'action_deeper')
async def handle_action_deeper(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–ò–¥—Ç–∏ –≥–ª—É–±–∂–µ'."""
    user_id = callback_query.from_user.id

    try:
        with sqlite3.connect('db/game.db') as conn:
            cursor = conn.cursor()

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            enemy = get_random_enemy(cursor)
            if enemy:
                enemy_id, enemy_name, _, _, _, _, enemy_hp, _, _, enemy_image, enemy_description = enemy

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
                photo = FSInputFile(enemy_image)
                await callback_query.message.answer_photo(
                    photo=photo,
                    caption=f"{enemy_name}\n\n{enemy_description}"
                )

                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±–æ—è –∏–ª–∏ –ø–æ–±–µ–≥–∞
                await callback_query.message.answer(
                    f"–£ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ {enemy_hp} HP.\n–ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚öîÔ∏è –í –±–æ–π", callback_data=f"action_attack_{enemy_id}")],
                        [InlineKeyboardButton(text="üèÉ‚Äç‚ôÇÔ∏è –°–±–µ–∂–∞—Ç—å", callback_data=f"action_flee_{enemy_id}")]
                    ])
                )
            else:
                await callback_query.message.answer("–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except sqlite3.Error as e:
        await callback_query.message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}')


@callback_router.callback_query(lambda c: c.data.startswith('action_flee_'))
async def handle_action_flee(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–°–±–µ–∂–∞—Ç—å'."""
    user_id = callback_query.from_user.id
    enemy_id = int(callback_query.data.split('_')[2])  # action_flee_1 ‚Üí 1

    # –®–∞–Ω—Å –ø–æ–±–µ–≥–∞ 50/50
    if random.random() < 0.5:
        await callback_query.message.answer("–í–∞–º —É–¥–∞–ª–æ—Å—å —Å–±–µ–∂–∞—Ç—å!")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é
        await go_to_location(callback_query.message)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ª–æ–∫–∞—Ü–∏—é
    else:
        await callback_query.message.answer("–í–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–±–µ–∂–∞—Ç—å! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –±–æ—é.")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–æ–π
        await handle_action_attack(callback_query)


# @callback_router.callback_query(lambda c: c.data.startswith('action_attack_'))
# async def handle_action_attack(callback_query: CallbackQuery):
#     """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–í –±–æ–π'."""
#     user_id = callback_query.from_user.id
#     enemy_id = int(callback_query.data.split('_')[2])  # action_attack_1 ‚Üí 1
#
#     try:
#         with sqlite3.connect('db/game.db') as conn:
#             cursor = conn.cursor()
#
#             # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
#             cursor.execute('SELECT * FROM characters WHERE user_id=?', (user_id,))
#             player = cursor.fetchone()
#
#             cursor.execute('SELECT * FROM enemies WHERE id=?', (enemy_id,))
#             enemy = cursor.fetchone()
#
#             if player and enemy:
#                 player_damage = random.randint(player[10], player[11])  # min_damage –∏ max_damage –∏–≥—Ä–æ–∫–∞
#                 enemy_hp = enemy[6] - player_damage
#
#                 if enemy_hp <= 0:
#                     await callback_query.message.answer(
#                         f"–í—ã –Ω–∞–Ω–µ—Å–ª–∏ {player_damage} —É—Ä–æ–Ω–∞ –∏ –ø–æ–±–µ–¥–∏–ª–∏ {enemy[1]}!"
#                     )
#                 else:
#                     cursor.execute('UPDATE enemies SET hp=? WHERE id=?', (enemy_hp, enemy_id))
#                     conn.commit()
#                     await callback_query.message.answer(
#                         f"–í—ã –Ω–∞–Ω–µ—Å–ª–∏ {player_damage} —É—Ä–æ–Ω–∞. –£ {enemy[1]} –æ—Å—Ç–∞–ª–æ—Å—å {enemy_hp} HP."
#                     )
#             else:
#                 await callback_query.message.answer("–ò–≥—Ä–æ–∫ –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
#     except sqlite3.Error as e:
#         await callback_query.message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}')


@callback_router.callback_query(lambda c: c.data.startswith('action_attack_'))
async def handle_action_attack(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–ê—Ç–∞–∫–æ–≤–∞—Ç—å'."""
    user_id = callback_query.from_user.id
    enemy_id = int(callback_query.data.split('_')[2])  # action_attack_1 ‚Üí 1

    try:
        with sqlite3.connect('db/game.db') as conn:
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            cursor.execute('SELECT * FROM characters WHERE user_id=?', (user_id,))
            player = cursor.fetchone()

            cursor.execute('SELECT * FROM enemies WHERE id=?', (enemy_id,))
            enemy = cursor.fetchone()

            if player and enemy:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                player_data = {
                    'id': player[0],
                    'hp': player[7],
                    'min_damage': player[10],
                    'max_damage': player[11]
                }
                enemy_data = {
                    'id': enemy[0],
                    'hp': enemy[6],
                    'min_damage': enemy[7],
                    'max_damage': enemy[8]
                }

                # –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
                player_damage = calculate_damage(player_data, enemy_data)
                await callback_query.message.answer(
                    f"–í—ã –Ω–∞–Ω–µ—Å–ª–∏ {player_damage} —É—Ä–æ–Ω–∞. –£ {enemy[1]} –æ—Å—Ç–∞–ª–æ—Å—å {enemy_data['hp']} HP."
                )

                if enemy_data['hp'] <= 0:
                    await callback_query.message.answer(f"–í—ã –ø–æ–±–µ–¥–∏–ª–∏ {enemy[1]}!")
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –ª–æ–∫–∞—Ü–∏—é
                    await return_to_location(callback_query.message, player[12])  # player[8] ‚Äî current_location
                    return

                # –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –∞—Ç–∞–∫—É–µ—Ç
                enemy_damage = calculate_damage(enemy_data, player_data)
                await callback_query.message.answer(
                    f"{enemy[1]} –Ω–∞–Ω—ë—Å –≤–∞–º {enemy_damage} —É—Ä–æ–Ω–∞. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {player_data['hp']} HP."
                )

                if player_data['hp'] <= 0:
                    await callback_query.message.answer("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!")
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –ª–æ–∫–∞—Ü–∏—é
                    await return_to_location(callback_query.message, player[12])  # player[8] ‚Äî current_location
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º HP –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                cursor.execute('UPDATE characters SET hp=? WHERE id=?', (player_data['hp'], player_data['id']))
                cursor.execute('UPDATE enemies SET hp=? WHERE id=?', (enemy_data['hp'], enemy_data['id']))
                conn.commit()

                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–æ–π
                await callback_query.message.answer(
                    "–ë–æ–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è! –ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data=f"action_attack_{enemy_id}")],
                        [InlineKeyboardButton(text="üõ°Ô∏è –ó–∞—â–∏—â–∞—Ç—å—Å—è", callback_data=f"action_defend_{enemy_id}")],
                        [InlineKeyboardButton(text="üèÉ‚Äç‚ôÇÔ∏è –°–±–µ–∂–∞—Ç—å", callback_data=f"action_flee_{enemy_id}")]
                    ])
                )
            else:
                await callback_query.message.answer("–ò–≥—Ä–æ–∫ –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except sqlite3.Error as e:
        await callback_query.message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}')

@callback_router.callback_query(lambda c: c.data.startswith('action_defend_'))
async def handle_action_defend(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–ó–∞—â–∏—â–∞—Ç—å—Å—è'."""
    user_id = callback_query.from_user.id
    enemy_id = int(callback_query.data.split('_')[2])  # action_defend_1 ‚Üí 1

    try:
        with sqlite3.connect('db/game.db') as conn:
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            cursor.execute('SELECT * FROM characters WHERE user_id=?', (user_id,))
            player = cursor.fetchone()

            cursor.execute('SELECT * FROM enemies WHERE id=?', (enemy_id,))
            enemy = cursor.fetchone()

            if player and enemy:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                player_data = {
                    'id': player[0],
                    'hp': player[7],
                    'min_damage': player[10],
                    'max_damage': player[11]
                }
                enemy_data = {
                    'id': enemy[0],
                    'hp': enemy[6],
                    'min_damage': enemy[7],
                    'max_damage': enemy[8]
                }

                # –ò–≥—Ä–æ–∫ –∑–∞—â–∏—â–∞–µ—Ç—Å—è
                await callback_query.message.answer("–í—ã —Ä–µ—à–∏–ª–∏ –∑–∞—â–∏—â–∞—Ç—å—Å—è.")

                # –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –∞—Ç–∞–∫—É–µ—Ç
                enemy_damage = calculate_damage(enemy_data, player_data, is_defending=True)
                await callback_query.message.answer(
                    f"{enemy[1]} –Ω–∞–Ω—ë—Å –≤–∞–º {enemy_damage} —É—Ä–æ–Ω–∞. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {player_data['hp']} HP."
                )

                if player_data['hp'] <= 0:
                    await callback_query.message.answer("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!")
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º HP –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                cursor.execute('UPDATE characters SET hp=? WHERE id=?', (player_data['hp'], player_data['id']))
                cursor.execute('UPDATE enemies SET hp=? WHERE id=?', (enemy_data['hp'], enemy_data['id']))
                conn.commit()

                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–æ–π
                await callback_query.message.answer(
                    "–ë–æ–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è! –ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data=f"action_attack_{enemy_id}")],
                        [InlineKeyboardButton(text="üõ°Ô∏è –ó–∞—â–∏—â–∞—Ç—å—Å—è", callback_data=f"action_defend_{enemy_id}")],
                        [InlineKeyboardButton(text="üèÉ‚Äç‚ôÇÔ∏è –°–±–µ–∂–∞—Ç—å", callback_data=f"action_flee_{enemy_id}")]
                    ])
                )
            else:
                await callback_query.message.answer("–ò–≥—Ä–æ–∫ –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except sqlite3.Error as e:
        await callback_query.message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}')