import logging
import random

from aiogram import Router
from aiogram import types
from aiogram.types import CallbackQuery
from aiogram.types import FSInputFile
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database.crud import get_connected_locations, get_random_enemy
from handlers.location import go_to_location
from keyboards.location_keyboard import get_location_keyboard, get_shop_buy_keyboard

callback_router = Router()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def return_to_location(message: types.Message, location_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é."""
    from sqlalchemy.orm import sessionmaker
    from sqlalchemy import create_engine
    from models.location import Location
    import os
    DATABASE_URL = os.getenv('SQLALCHEMY_DATABASE_URL')
    engine = create_engine(DATABASE_URL)
    Session = sessionmaker(bind=engine)
    session = Session()
    try:
        location = session.query(Location).filter_by(id=location_id).first()
        if location:
            photo = FSInputFile(location.image)
            keyboard = get_location_keyboard(location)
            await message.answer_photo(
                photo=photo,
                caption=f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–æ–∫–∞—Ü–∏–∏: {location.name}\n\n{location.description}",
                reply_markup=keyboard
            )
        else:
            await message.answer("–õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except FileNotFoundError:
        await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
    finally:
        session.close()

def calculate_damage(attacker, defender, is_defending=False):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–Ω, –Ω–∞–Ω–µ—Å—ë–Ω–Ω—ã–π –∞—Ç–∞–∫—É—é—â–∏–º."""
    damage = random.randint(attacker['min_damage'], attacker['max_damage'])
    if is_defending:
        damage = max(1, damage // 2)  # –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–Ω, –µ—Å–ª–∏ –∑–∞—â–∏—â–∞–µ–º—Å—è
    defender['hp'] -= damage
    return damage


@callback_router.callback_query(lambda c: c.data == 'action_shop_buy')
async def handle_action_shop_buy(callback_query: CallbackQuery):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ (—à–∞—É—Ä–º–∞)."""
    await callback_query.message.edit_reply_markup(reply_markup=get_shop_buy_keyboard())
    await callback_query.answer()

@callback_router.callback_query(lambda c: c.data == 'action_character_info')
async def handle_action_character_info(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ: –∑–¥–æ—Ä–æ–≤—å–µ, —É—Ä–æ–≤–µ–Ω—å, –æ–ø—ã—Ç –∏ –æ–ø—ã—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è."""
    from sqlalchemy.orm import sessionmaker
    from sqlalchemy import create_engine
    from models.character import Character
    import os
    DATABASE_URL = os.getenv('SQLALCHEMY_DATABASE_URL')
    engine = create_engine(DATABASE_URL)
    Session = sessionmaker(bind=engine)
    session = Session()
    try:
        user_id = callback_query.from_user.id
        character = session.query(Character).filter_by(user_id=user_id).first()
        if character:
            max_hp = 100 + (character.endurance - 10) * 10
            text = (
                f"<b>{character.name}</b>\n"
                f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {character.hp}/{max_hp}\n"
                f"‚≠êÔ∏è –£—Ä–æ–≤–µ–Ω—å: {character.level}\n"
                f"üî∏ –û–ø—ã—Ç: {character.exp}\n"
                f"üîú –î–æ —Å–ª–µ–¥. —É—Ä–æ–≤–Ω—è: {character.exp_to_next_level - character.exp}"
            )
            await callback_query.message.answer(text, parse_mode="HTML")
        else:
            await callback_query.message.answer("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    finally:
        session.close()
    await callback_query.answer()

@callback_router.callback_query(lambda c: c.data == 'action_shop_back')
async def handle_action_shop_back(callback_query: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É."""
    from sqlalchemy.orm import sessionmaker
    from sqlalchemy import create_engine
    from models.character import Character
    from models.location import Location
    import os
    DATABASE_URL = os.getenv('SQLALCHEMY_DATABASE_URL')
    engine = create_engine(DATABASE_URL)
    Session = sessionmaker(bind=engine)
    session = Session()
    try:
        user_id = callback_query.from_user.id
        character = session.query(Character).filter_by(user_id=user_id).first()
        if character:
            location = session.query(Location).filter_by(id=character.current_location).first()
            if location:
                await callback_query.message.edit_reply_markup(reply_markup=get_location_keyboard(location))
    finally:
        session.close()
    await callback_query.answer()

@callback_router.callback_query(lambda c: c.data == 'action_buy_shawarma')
async def handle_action_buy_shawarma(callback_query: CallbackQuery):
    """–ü–æ–∫—É–ø–∫–∞ —à–∞—É—Ä–º—ã: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å HP –¥–æ –º–∞–∫—Å–∏–º—É–º–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏."""
    from sqlalchemy.orm import sessionmaker
    from sqlalchemy import create_engine
    from models.character import Character
    import os
    DATABASE_URL = os.getenv('SQLALCHEMY_DATABASE_URL')
    engine = create_engine(DATABASE_URL)
    Session = sessionmaker(bind=engine)
    session = Session()
    try:
        user_id = callback_query.from_user.id
        character = session.query(Character).filter_by(user_id=user_id).first()
        if character:
            # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ HP –ø–æ —Ñ–æ—Ä–º—É–ª–µ: 100 + (endurance - 10) * 10
            max_hp = 100 + (character.endurance - 10) * 10
            character.hp = max_hp
            session.commit()
            from aiogram.types import FSInputFile
            shawarma_img = FSInputFile("images/shawa.jpg")
            await callback_query.message.answer_photo(
                photo=shawarma_img,
                caption="–í—ã –∫—É–ø–∏–ª–∏ —à–∞—É—Ä–º—É üåØ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ!"
            )
            # –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–æ–∫—É–ø–æ–∫
            from aiogram.types import FSInputFile
            shop_img = FSInputFile("images/shop.jpg")
            await callback_query.message.answer_photo(
                photo=shop_img,
                caption="–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                reply_markup=get_shop_buy_keyboard()
            )
        else:
            await callback_query.message.answer("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    finally:
        session.close()
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫—É 'message is not modified'
    try:
        await callback_query.message.edit_reply_markup(reply_markup=get_shop_buy_keyboard())
    except Exception as e:
        try:
            from aiogram.exceptions import TelegramBadRequest
        except ImportError:
            TelegramBadRequest = None
        if not (TelegramBadRequest and isinstance(e, TelegramBadRequest) and 'message is not modified' in str(e)):
            raise
    await callback_query.answer()

@callback_router.callback_query(lambda c: c.data == 'action_move')
async def handle_action_move(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–ü–µ—Ä–µ–π—Ç–∏ –≤ –¥—Ä—É–≥—É—é –ª–æ–∫–∞—Ü–∏—é'."""
    user_id = callback_query.from_user.id

    from sqlalchemy.orm import sessionmaker
    from sqlalchemy import create_engine
    from models.character import Character
    from models.location import Location, LocationConnection
    import os
    DATABASE_URL = os.getenv('SQLALCHEMY_DATABASE_URL')
    engine = create_engine(DATABASE_URL)
    Session = sessionmaker(bind=engine)
    session = Session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é –∏–≥—Ä–æ–∫–∞
        character = session.query(Character).filter_by(user_id=user_id).first()
        if character and character.current_location is not None:
            current_location_id = character.current_location
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ORM
            connections = session.query(LocationConnection).filter_by(location_id=current_location_id).all()
            connected_locations = [session.query(Location).filter_by(id=conn.connected_location_id).first() for conn in connections]
            if connected_locations:
                keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text=loc.name, callback_data=f"move_to_{loc.id}")]
                    for loc in connected_locations if loc is not None
                ])
                await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞:", reply_markup=keyboard)
            else:
                await callback_query.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞.")
        else:
            await callback_query.message.answer("–¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        await callback_query.message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
    finally:
        session.close()

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–£–π—Ç–∏' –∏–∑ –º–∞–≥–∞–∑–∏–Ω—á–∏–∫–∞ (–¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ, —á—Ç–æ –∏ action_move)
@callback_router.callback_query(lambda c: c.data == 'action_leave')
async def handle_action_leave(callback_query: CallbackQuery):
    await handle_action_move(callback_query)

@callback_router.callback_query(lambda c: c.data.startswith('move_to_'))
async def handle_move_to_location(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞."""
    from sqlalchemy.orm import sessionmaker
    from sqlalchemy import create_engine
    from models.character import Character
    from models.location import Location
    import os
    user_id = callback_query.from_user.id
    location_id = int(callback_query.data.split('_')[2])  # move_to_1 ‚Üí id
    DATABASE_URL = os.getenv('SQLALCHEMY_DATABASE_URL')
    engine = create_engine(DATABASE_URL)
    Session = sessionmaker(bind=engine)
    session = Session()
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
        location = session.query(Location).filter_by(id=location_id).first()
        if location:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é –∏–≥—Ä–æ–∫–∞
            character = session.query(Character).filter_by(user_id=user_id).first()
            if character:
                character.current_location = location.id
                session.commit()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏
            keyboard = get_location_keyboard(location)
            photo = FSInputFile(location.image)
            await callback_query.message.answer_photo(
                photo=photo,
                caption=f"–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –ª–æ–∫–∞—Ü–∏—é: {location.name}\n\n{location.description}",
                reply_markup=keyboard
            )
        else:
            await callback_query.message.answer("–õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except FileNotFoundError:
        await callback_query.message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        await callback_query.message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
    finally:
        session.close()


@callback_router.callback_query(lambda c: c.data == 'action_deeper')
async def handle_action_deeper(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–ò–¥—Ç–∏ –≥–ª—É–±–∂–µ'."""
    user_id = callback_query.from_user.id

    from sqlalchemy.orm import sessionmaker
    from sqlalchemy import create_engine
    from models.enemy import Enemy
    import os
    DATABASE_URL = os.getenv('SQLALCHEMY_DATABASE_URL')
    engine = create_engine(DATABASE_URL)
    Session = sessionmaker(bind=engine)
    session = Session()
    import random
    try:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        enemies = session.query(Enemy).all()
        if enemies:
            enemy = random.choice(enemies)
            photo = FSInputFile(enemy.image)
            await callback_query.message.answer_photo(
                photo=photo,
                caption=f"{enemy.name}\n\n{enemy.description}"
            )
            await callback_query.message.answer(
                f"–£ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ {enemy.hp} HP.\n–ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚öîÔ∏è –í –±–æ–π", callback_data=f"action_attack_{enemy.id}")],
                    [InlineKeyboardButton(text="üèÉ‚Äç‚ôÇÔ∏è –°–±–µ–∂–∞—Ç—å", callback_data=f"action_flee_{enemy.id}")]
                ])
            )
        else:
            await callback_query.message.answer("–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except FileNotFoundError:
        await callback_query.message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        await callback_query.message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
    finally:
        session.close()


@callback_router.callback_query(lambda c: c.data.startswith('action_flee_'))
async def handle_action_flee(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–°–±–µ–∂–∞—Ç—å'."""
    user_id = callback_query.from_user.id
    enemy_id = int(callback_query.data.split('_')[2])  # action_flee_1 ‚Üí 1

    # –®–∞–Ω—Å –ø–æ–±–µ–≥–∞ 50/50
    if random.random() < 0.5:
        await callback_query.message.answer("–í–∞–º —É–¥–∞–ª–æ—Å—å —Å–±–µ–∂–∞—Ç—å!")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é
        await go_to_location(callback_query.message)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ª–æ–∫–∞—Ü–∏—é
    else:
        await callback_query.message.answer("–í–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–±–µ–∂–∞—Ç—å! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –±–æ—é.")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–æ–π
        await handle_action_attack(callback_query)


# @callback_router.callback_query(lambda c: c.data.startswith('action_attack_'))
# async def handle_action_attack(callback_query: CallbackQuery):
#     """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–í –±–æ–π'."""
#     user_id = callback_query.from_user.id
#     enemy_id = int(callback_query.data.split('_')[2])  # action_attack_1 ‚Üí 1
#
#     try:
#         with sqlite3.connect('db/game.db') as conn:
#             cursor = conn.cursor()
#
#             # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
#             cursor.execute('SELECT * FROM characters WHERE user_id=?', (user_id,))
#             player = cursor.fetchone()
#
#             cursor.execute('SELECT * FROM enemies WHERE id=?', (enemy_id,))
#             enemy = cursor.fetchone()
#
#             if player and enemy:
#                 player_damage = random.randint(player[10], player[11])  # min_damage –∏ max_damage –∏–≥—Ä–æ–∫–∞
#                 enemy_hp = enemy[6] - player_damage
#
#                 if enemy_hp <= 0:
#                     await callback_query.message.answer(
#                         f"–í—ã –Ω–∞–Ω–µ—Å–ª–∏ {player_damage} —É—Ä–æ–Ω–∞ –∏ –ø–æ–±–µ–¥–∏–ª–∏ {enemy[1]}!"
#                     )
#                 else:
#                     cursor.execute('UPDATE enemies SET hp=? WHERE id=?', (enemy_hp, enemy_id))
#                     conn.commit()
#                     await callback_query.message.answer(
#                         f"–í—ã –Ω–∞–Ω–µ—Å–ª–∏ {player_damage} —É—Ä–æ–Ω–∞. –£ {enemy[1]} –æ—Å—Ç–∞–ª–æ—Å—å {enemy_hp} HP."
#                     )
#             else:
#                 await callback_query.message.answer("–ò–≥—Ä–æ–∫ –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
#     except sqlite3.Error as e:
#         await callback_query.message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}')


@callback_router.callback_query(lambda c: c.data.startswith('action_attack_'))
async def handle_action_attack(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–ê—Ç–∞–∫–æ–≤–∞—Ç—å'."""
    user_id = callback_query.from_user.id
    enemy_id = int(callback_query.data.split('_')[2])  # action_attack_1 ‚Üí 1

    from sqlalchemy.orm import sessionmaker
    from sqlalchemy import create_engine
    from models.character import Character
    from models.enemy import Enemy
    import os
    DATABASE_URL = os.getenv('SQLALCHEMY_DATABASE_URL')
    engine = create_engine(DATABASE_URL)
    Session = sessionmaker(bind=engine)
    session = Session()
    try:
        player = session.query(Character).filter_by(user_id=user_id).first()
        enemy = session.query(Enemy).filter_by(id=enemy_id).first()
        if player and enemy:
            player_data = {
                'id': player.id,
                'hp': player.hp,
                'min_damage': player.min_damage,
                'max_damage': player.max_damage
            }
            enemy_data = {
                'id': enemy.id,
                'hp': enemy.hp,
                'min_damage': enemy.min_damage,
                'max_damage': enemy.max_damage
            }
            # –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
            player_damage = calculate_damage(player_data, enemy_data)
            await callback_query.message.answer(
                f"–í—ã –Ω–∞–Ω–µ—Å–ª–∏ {player_damage} —É—Ä–æ–Ω–∞. –£ {enemy.name} –æ—Å—Ç–∞–ª–æ—Å—å {enemy_data['hp']} HP."
            )
            if enemy_data['hp'] <= 0:
                gold_reward = getattr(enemy, 'gold', 0)
                exp_reward = getattr(enemy, 'exp_reward', 0)
                player.gold = getattr(player, 'gold', 0) + gold_reward
                player.exp = getattr(player, 'exp', 0) + exp_reward
                level_up_messages = []
                # Level up logic
                while player.exp >= player.exp_to_next_level:
                    player.exp -= player.exp_to_next_level
                    player.level += 1
                    # Increase exp required for next level (e.g., +50%)
                    player.exp_to_next_level = int(player.exp_to_next_level * 1.5)
                    # Restore HP to max (optional)
                    player.hp = 100 + (player.endurance - 10) * 10
                    level_up_messages.append(f"\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω –¥–æ {player.level}! HP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
                session.delete(enemy)
                session.commit()
                await callback_query.message.answer(
                    f"–í—ã –ø–æ–±–µ–¥–∏–ª–∏ {enemy.name}!\n\nüèÖ –ù–∞–≥—Ä–∞–¥–∞: +{gold_reward} gold, +{exp_reward} XP." + ''.join(level_up_messages)
                )
                await return_to_location(callback_query.message, player.current_location)
                return
            # –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –∞—Ç–∞–∫—É–µ—Ç
            enemy_damage = calculate_damage(enemy_data, player_data)
            await callback_query.message.answer(
                f"{enemy.name} –Ω–∞–Ω—ë—Å –≤–∞–º {enemy_damage} —É—Ä–æ–Ω–∞. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {player_data['hp']} HP."
            )
            if player_data['hp'] <= 0:
                await callback_query.message.answer("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!")
                await return_to_location(callback_query.message, player.current_location)
                return
            # –û–±–Ω–æ–≤–ª—è–µ–º HP –≤ –±–∞–∑–µ
            player.hp = player_data['hp']
            enemy.hp = enemy_data['hp']
            session.commit()
            await callback_query.message.answer(
                "–ë–æ–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è! –ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data=f"action_attack_{enemy_id}")],
                    [InlineKeyboardButton(text="üõ°Ô∏è –ó–∞—â–∏—â–∞—Ç—å—Å—è", callback_data=f"action_defend_{enemy_id}")],
                    [InlineKeyboardButton(text="üèÉ‚Äç‚ôÇÔ∏è –°–±–µ–∂–∞—Ç—å", callback_data=f"action_flee_{enemy_id}")]
                ])
            )
        else:
            await callback_query.message.answer("–ò–≥—Ä–æ–∫ –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as e:
        await callback_query.message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
    finally:
        session.close()

@callback_router.callback_query(lambda c: c.data.startswith('action_defend_'))
async def handle_action_defend(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–ó–∞—â–∏—â–∞—Ç—å—Å—è'."""
    user_id = callback_query.from_user.id
    enemy_id = int(callback_query.data.split('_')[2])  # action_defend_1 ‚Üí 1

    from sqlalchemy.orm import sessionmaker
    from sqlalchemy import create_engine
    from models.character import Character
    from models.enemy import Enemy
    import os
    DATABASE_URL = os.getenv('SQLALCHEMY_DATABASE_URL')
    engine = create_engine(DATABASE_URL)
    Session = sessionmaker(bind=engine)
    session = Session()
    try:
        player = session.query(Character).filter_by(user_id=user_id).first()
        enemy = session.query(Enemy).filter_by(id=enemy_id).first()
        if player and enemy:
            player_data = {
                'id': player.id,
                'hp': player.hp,
                'min_damage': player.min_damage,
                'max_damage': player.max_damage
            }
            enemy_data = {
                'id': enemy.id,
                'hp': enemy.hp,
                'min_damage': enemy.min_damage,
                'max_damage': enemy.max_damage
            }
            await callback_query.message.answer("–í—ã —Ä–µ—à–∏–ª–∏ –∑–∞—â–∏—â–∞—Ç—å—Å—è.")
            enemy_damage = calculate_damage(enemy_data, player_data, is_defending=True)
            await callback_query.message.answer(
                f"{enemy.name} –Ω–∞–Ω—ë—Å –≤–∞–º {enemy_damage} —É—Ä–æ–Ω–∞. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {player_data['hp']} HP."
            )
            if player_data['hp'] <= 0:
                await callback_query.message.answer("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!")
                return
            player.hp = player_data['hp']
            enemy.hp = enemy_data['hp']
            session.commit()
            await callback_query.message.answer(
                "–ë–æ–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è! –ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data=f"action_attack_{enemy_id}")],
                    [InlineKeyboardButton(text="üõ°Ô∏è –ó–∞—â–∏—â–∞—Ç—å—Å—è", callback_data=f"action_defend_{enemy_id}")],
                    [InlineKeyboardButton(text="üèÉ‚Äç‚ôÇÔ∏è –°–±–µ–∂–∞—Ç—å", callback_data=f"action_flee_{enemy_id}")]
                ])
            )
        else:
            await callback_query.message.answer("–ò–≥—Ä–æ–∫ –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as e:
        await callback_query.message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
    finally:
        session.close()